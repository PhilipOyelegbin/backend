// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String       @id @default(cuid())
  name             String
  email            String       @unique
  phone_number     String?
  address          String?
  password         String
  role             Role         @default(Customer)
  reservation      Reservation?
  favorite         Favorite[]
  reset_token      String?
  reset_expiration String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt()

  @@map("users")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  movieId   String
  user      User     @relation(fields: [userId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])
  createdAt DateTime @default(now())

  @@map("favorites")
}

model Movie {
  id          String        @id @default(cuid())
  title       String
  description String?
  cover_image String
  show_time   String
  show_date   DateTime
  price       Float
  category    Category      @default(Null)
  reservation Reservation[]
  favorite    Favorite[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()

  @@map("movies")
}

model Theater {
  id          String        @id @default(cuid())
  name        String
  address     String
  capacity    Int
  reservation Reservation[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt()

  @@map("theaters")
}

model Reservation {
  id          String   @id @default(cuid())
  num_ticket  Int
  total_price Decimal?
  movieId     String
  theaterId   String
  userId      String   @unique
  sessionId   String?
  status      Status   @default(Pending)
  movie       Movie    @relation(fields: [movieId], references: [id])
  theater     Theater  @relation(fields: [theaterId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  @@map("reservations")
}

model BlacklistToken {
  id           String   @unique @default(cuid())
  access_token String
  createdAt    DateTime @default(now())

  @@map("blacklisttokens")
}

enum Role {
  Admin
  Customer
}

enum Category {
  Action
  Adventure
  Drama
  Romance
  SiFi
  Thriller
  Others
  Null
}

enum Status {
  Pending
  Confirmed
  Cancelled
}
